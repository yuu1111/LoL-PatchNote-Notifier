name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout コード
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Node.js セットアップ
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: 依存関係インストール
      run: npm ci
    
    - name: 型チェック
      run: npm run typecheck
    
    - name: リンティング
      run: npm run lint
    
    - name: テスト実行
      run: npm test
    
    - name: プロダクションビルド
      run: npm run build
    
    - name: バージョン情報を生成
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "clean_version=${VERSION#v}" >> $GITHUB_OUTPUT
    
    - name: リリースアーカイブを作成
      run: |
        mkdir -p release
        
        # 本番用ファイルをコピー
        cp -r dist release/
        cp package.json release/
        cp package-lock.json release/
        cp .env.example release/
        cp README.md release/
        cp README-JP.md release/
        cp LICENSE release/ 2>/dev/null || echo "LICENSE file not found, skipping"
        
        # Scripts ディレクトリがあればコピー
        if [ -d "Scripts" ]; then
          cp -r Scripts release/
        fi
        
        # 本番用 package.json を調整（devDependencies を除去）
        cd release
        npm pkg delete devDependencies
        npm pkg delete scripts.postinstall
        
        # アーカイブを作成
        cd ..
        tar -czf "lol-patch-notifier-${{ steps.version.outputs.clean_version }}.tar.gz" -C release .
        zip -r "lol-patch-notifier-${{ steps.version.outputs.clean_version }}.zip" release/
    
    - name: チェンジログを生成
      id: changelog
      run: |
        if [ -f "CHANGELOG.md" ]; then
          # CHANGELOG.md がある場合、最新のセクションを抽出
          CHANGELOG=$(awk '/^## \[/ {if (first) exit; first=1} first {print}' CHANGELOG.md | head -50)
        else
          # CHANGELOG.md がない場合、Git ログから生成
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%an)" ${PREVIOUS_TAG}..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%an)" --max-count=20)
          fi
        fi
        
        # GitHub Actions の環境変数にセット
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: GitHubリリースを作成
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "LoL Patch Notifier ${{ steps.version.outputs.version }}"
        body: |
          ## 🎮 League of Legends Patch Notifier ${{ steps.version.outputs.version }}
          
          ### 📋 Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ### 📦 Installation
          
          1. **Download Archive**
             ```bash
             # tar.gz format
             wget https://github.com/yuu1111/LoL-PatchNote-Notifier/releases/download/${{ steps.version.outputs.version }}/lol-patch-notifier-${{ steps.version.outputs.clean_version }}.tar.gz
             tar -xzf lol-patch-notifier-${{ steps.version.outputs.clean_version }}.tar.gz
             cd lol-patch-notifier-${{ steps.version.outputs.clean_version }}
             
             # zip format
             wget https://github.com/yuu1111/LoL-PatchNote-Notifier/releases/download/${{ steps.version.outputs.version }}/lol-patch-notifier-${{ steps.version.outputs.clean_version }}.zip
             unzip lol-patch-notifier-${{ steps.version.outputs.clean_version }}.zip
             cd release
             ```
          
          2. **Install Dependencies**
             ```bash
             npm ci --only=production
             ```
          
          3. **Environment Setup**
             ```bash
             cp .env.example .env
             # Edit .env file with your configuration
             ```
          
          4. **Start Application**
             ```bash
             npm start
             ```
          
          ### ⚙️ Required Environment Variables
          - `DISCORD_WEBHOOK_URL`: Discord Webhook URL
          - `GEMINI_API_KEY`: Google Gemini API Key
          - See `.env.example` for all configuration options
          
          ### 📊 System Requirements
          - Node.js 18.0.0 or higher
          - npm 8.0.0 or higher
          - 256MB+ memory
          
          ### 🔗 Documentation
          - [README (English)](https://github.com/yuu1111/LoL-PatchNote-Notifier/blob/main/README.md)
          - [README (日本語)](https://github.com/yuu1111/LoL-PatchNote-Notifier/blob/main/README-JP.md)
          
          ---
          **Automated Release by GitHub Actions** 🤖
        draft: false
        prerelease: false
        files: |
          lol-patch-notifier-${{ steps.version.outputs.clean_version }}.tar.gz
          lol-patch-notifier-${{ steps.version.outputs.clean_version }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  notify:
    runs-on: ubuntu-latest
    needs: build
    if: success()
    
    steps:
    - name: Release completion notification
      run: |
        echo "🎉 Release ${{ github.ref_name }} completed successfully!"
        echo "📦 Download: https://github.com/yuu1111/LoL-PatchNote-Notifier/releases/tag/${{ github.ref_name }}"